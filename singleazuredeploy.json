{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "dnsLabelPrefix": {
            "type": "string",
            "defaultValue": "shellazure",
            "metadata": {
                "description": "Unique public dns prefix where the  node will be exposed"
            }
        },
        "adminUserName": {
            "type": "string",
            "defaultValue": "azureuser",
            "metadata": {
                "description": "User name for the Virtual Machine. Pick a valid username otherwise there will be a BadRequest error."
            }
        },
        "ImagePublisher": {
            "type": "string",
            "defaultValue": "Canonical",
            "allowedValues": [
                "Canonical",
                "openlogic",
                "SUSE"
            ],
            "metadata": {
                "description": "openlogic/Canonical is the CentOS/Ubuntu Distributor in Azure Market Place"
            }
        },
        "ImageOffer": {
            "type": "string",
            "defaultValue": "UbuntuServer",
            "allowedValues": [
                "CentOS-HPC",
                "UbuntuServer",
                "CentOS",
                "SLES",
                "openSUSE-Leap"
            ],
            "metadata": {
                "description": "CentOS-HPC (H16R/H16MR/A9) with pre-installed Intel MPI and mlx4 drivers on Infiniband Available, UbuntuServer 16.04-LTS/CentOS 7.3  for GPU and CentOS-HPC for the new H-Series"
            }
        },
        "ImageSku": {
            "type": "string",
            "defaultValue": "16.04-LTS",
            "allowedValues": [
                "6.5",
                "7.1",
                "16.04-LTS",
                "7.2",
                "7.3",
                "42.2",
                "12-SP2"
            ],
            "metadata": {
                "description": "OpenLogic CentOS-HPC 7.1/ CentOS 7.3 or Canonical 16.04-LTS Sku to use"
            }
        },
        "sshPublicKey": {
            "type": "securestring",
            "metadata": {
                "description": "This field must be a valid SSH public key. ssh with this RSA public key"
            }
        },
        "mountFolder": {
            "type": "string",
            "defaultValue": "/data",
            "metadata": {
                "description": "The Folder system to be auto-mounted."
            }
        },
        "hpcUserName": {
            "type": "string",
            "defaultValue": "hpcgpu",
            "metadata": {
                "description": "User for running HPC/GPU applications with shared home directory and SSH public key authentication setup within the cluster.   This user cannot login from outside the cluster. Pick a valid username otherwise there will be a BadRequest error."
            }
        },
        "schedulerpbsORTorque": {
            "type": "string",
            "allowedValues": [
                "None",
                "pbspro",
                "Torque"
            ],
            "defaultValue": "None",
            "metadata": {
                "description": "**Preferred Only for CentOS-HPC 7.1 Skus H-Series or A9s**"
            }
        },
        "saltStackInstall": {
            "type": "string",
            "allowedValues": [
                "No",
                "Yes"
            ],
            "defaultValue": "No",
            "metadata": {
                "description": "**Install SaltStack master on head and minions on computes**"
            }
        },
        "headandWorkerNodeSize": {
            "type": "string",
            "defaultValue": "Standard_NC24",
            "allowedValues": [
                "Basic_A0",
                "Basic_A1",
                "Basic_A2",
                "Basic_A3",
                "Basic_A4",
                "Standard_A0",
                "Standard_A1",
                "Standard_A1_v2",
                "Standard_A2",
                "Standard_A2_v2",
                "Standard_A2m_v2",
                "Standard_A3",
                "Standard_A5",
                "Standard_A4",
                "Standard_A4_v2",
                "Standard_A4m_v2",
                "Standard_A6",
                "Standard_A7",
                "Standard_A8",
                "Standard_A8_v2",
                "Standard_A8m_v2",
                "Standard_A9",
                "Standard_A10",
                "Standard_A11",
                "Standard_D1",
                "Standard_DS1",
                "Standard_D1_v2",
                "Standard_DS1_v2",
                "Standard_D2",
                "Standard_DS2",
                "Standard_D2_v2",
                "Standard_DS2_v2",
                "Standard_D3",
                "Standard_DS3",
                "Standard_D3_v2",
                "Standard_DS3_v2",
                "Standard_D4",
                "Standard_DS4",
                "Standard_D4_v2",
                "Standard_DS4_v2",
                "Standard_D5_v2",
                "Standard_DS5_v2",
                "Standard_D11",
                "Standard_DS11",
                "Standard_D11_v2",
                "Standard_DS11_v2",
                "Standard_D12",
                "Standard_DS12",
                "Standard_D12_v2",
                "Standard_DS12_v2",
                "Standard_D13",
                "Standard_DS13",
                "Standard_D13_v2",
                "Standard_DS13_v2",
                "Standard_D14",
                "Standard_DS14",
                "Standard_D14_v2",
                "Standard_DS14_v2",
                "Standard_D15_v2",
                "Standard_DS15_v2",
                "Standard_F1",
                "Standard_F1s",
                "Standard_F2",
                "Standard_F2s",
                "Standard_F4",
                "Standard_F4s",
                "Standard_F8",
                "Standard_F8s",
                "Standard_F16",
                "Standard_F16s",
                "Standard_G1",
                "Standard_G2",
                "Standard_G3",
                "Standard_G4",
                "Standard_G5",
                "Standard_GS1",
                "Standard_GS2",
                "Standard_GS3",
                "Standard_GS4",
                "Standard_GS5",
                "Standard_H8",
                "Standard_H16",
                "Standard_H8m",
                "Standard_H16m",
                "Standard_H16R",
                "Standard_H16mR",
                "Standard_NC6",
                "Standard_NC12",
                "Standard_NC24",
                "Standard_NC24R",
                "Standard_NV6",
                "Standard_NV12",
                "Standard_NV24"
            ],
            "metadata": {
                "description": "Size of the head and the worker nodes."
            }
        },
        "workerNodeCount": {
            "type": "int",
            "defaultValue": 0,
            "metadata": {
                "description": "If not zero (single VM), this template creates N worker node. Use workerNodeCount to specify that N."
            }
        },
        "storageType": {
            "type": "string",
            "allowedValues": [
                "Standard_LRS",
                "Premium_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS"
            ],
            "defaultValue": "Standard_LRS",
            "metadata": {
                "description": "Storage Account Type : Standard-LRS, Standard-GRS, Standard-RAGRS, Standard-ZRS, Premium_LRS - Striping rules Apply"
            }
        },
        "dockerVer": {
            "type": "string",
            "defaultValue": "docker-ce",
            "allowedValues": [
                "docker-ce"
            ],
            "metadata": {
                "description": "The docker version now docker-ce both for Ubuntu and CentOS with standard 17.03.x engine"
            }
        },
        "dockerComposeVer": {
            "type": "string",
            "defaultValue": "1.12.0",
            "metadata": {
                "description": "The Docker Compose Version"
            }
        },
        "dockerMachineVer": {
            "type": "string",
            "defaultValue": "0.10.0",
            "metadata": {
                "description": "The docker-machine version"
            }
        },
        "dataDiskSize": {
            "type": "int",
            "defaultValue": 1022,
            "metadata": {
                "description": "The size in GB of each data disk that is attached to the VM.  A MDADM RAID0  is created with all data disks auto-mounted,  that is dataDiskSize * dataDiskCount in size n the Storage."
            }
        },
        "masterVMName": {
            "type": "string",
            "defaultValue": "headN",
            "metadata": {
                "description": "The Name of the VM."
            }
        },
        "workerVMNamePrefix": {
            "type": "string",
            "defaultValue": "compN",
            "metadata": {
                "description": "The Name Prefix of the worker(s) VM Nodes which whould be suffixed by the worker number."
            }
        },
        "numDataDisks": {
            "type": "string",
            "defaultValue": "32",
            "allowedValues": [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16",
                "17",
                "18",
                "19",
                "20",
                "21",
                "22",
                "23",
                "24",
                "25",
                "26",
                "27",
                "28",
                "29",
                "30",
                "31",
                "32",
                "33",
                "35",
                "36",
                "37",
                "38",
                "39",
                "40",
                "41",
                "42",
                "43",
                "44",
                "45",
                "46",
                "47",
                "48",
                "49",
                "50",
                "51",
                "52"
            ],
            "metadata": {
                "description": "This parameter allows the user to select the number of disks wanted - number of max disks for VM size apply"
            }
        },
        "OMSWorkSpaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "(Optional- Keep Blank if not used)The Workspace ID for the OMS Portal Workspace."
            }
        },
        "OMSWorkSpaceKey": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "(Optional- Keep Blank if not used) The OMS Portal Workspace key"
            }
        },
        "nvidiadockerBinaryVersion": {
            "type": "string",
            "defaultValue": "1.0.1",
            "metadata": {
                "description": "The Latest nvidia-docker binary version from https://github.com/NVIDIA/nvidia-docker/releases"
            }
        },
        "cudaVersion": {
            "type": "string",
            "defaultValue": "8.0.61",
            "metadata": {
                "description": "The Latest NVIDIA CUDA Toolkit Version"
            }
        },
        "teslaDriverVersion": {
            "type": "string",
            "defaultValue": "375.51",
            "metadata": {
                "description": "The Latest TESLA DRIVER RUNFILE version for LINUX X64"
            }
        }
    },
    "resources": [{
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('newStorageAccountName')]",
            "apiVersion": "[variables('armApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[parameters('storageType')]"
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('avSetName')]",
            "apiVersion": "[variables('armApiVersion')]",
            "location": "[resourceGroup().location]",
            "properties": {}
        },
        {
            "apiVersion": "[variables('armApiVersion')]",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('networkSettings').virtualNetworkName]",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('networkSettings').addressPrefix]"
                    ]
                },
                "subnets": [{
                    "name": "[variables('networkSettings').subnet.dse.name]",
                    "properties": {
                        "addressPrefix": "[variables('networkSettings').subnet.dse.prefix]"
                    }
                }]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "[variables('armApiVersion')]",
            "name": "[variables('publicIPAddressName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('dnsLabelPrefix')]"
                }
            }
        },
        {
            "apiVersion": "[variables('armApiVersion')]",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('networkSettings').virtualNetworkName)]"
            ],
            "properties": {
                "ipConfigurations": [{
                    "name": "ipconfig1",
                    "properties": {
                        "privateIPAllocationMethod": "Static",
                        "privateIPAddress": "[variables('networkSettings').statics.master]",
                        "publicIPAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
                        },
                        "subnet": {
                            "id": "[variables('subnetRef')]"
                        }
                    }
                }]
            }
        },
        {
            "apiVersion": "[variables('armApiVersion')]",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[parameters('masterVMName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('avSetName'))]",
                "[concat('Microsoft.Resources/deployments/', 'diskSelection')]"
            ],
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('avSetName'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[variables('headNodeSize')]"
                },
                "osProfile": {
                    "computername": "[parameters('masterVMName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": "true",
                        "ssh": {
                            "publicKeys": [{
                                "path": "[variables('sshKeyPath')]",
                                "keyData": "[parameters('sshPublicKey')]"
                            }]
                        }
                    }
                },
                "storageProfile": {
                    "dataDisks": "[reference('diskSelection').outputs.dataDiskArray.value]",
                    "imageReference": {
                        "publisher": "[parameters('imagePublisher')]",
                        "offer": "[parameters('imageOffer')]",
                        "sku": "[parameters('imageSku')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat('http://',variables('newStorageAccountName'),'.blob.core.windows.net/',variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'),parameters('masterVMName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [{
                        "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                    }]
                }
            },
            "resources": [

            ]
        },
        {
            "apiVersion": "[variables('armApiVersion')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('masterVMName'), '/Installation')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', parameters('masterVMName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[concat(variables('artifactsLocation'), 'azuredeploy.sh')]"
                    ],
                    "commandToExecute": "[variables('installationCLI')]"
                }
            }
        },
        {
            "apiVersion": "2015-01-01",
            "name": "diskSelection",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('artifactsLocation'), 'diskSelection', '.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "numberofDataDisks": {
                        "value": "[parameters('numDataDisks')]"
                    },
                    "diskStorageAccountName": {
                        "value": "[variables('newStorageAccountName')]"
                    },
                    "diskCaching": {
                        "value": "[variables('diskCaching')]"
                    },
                    "diskSizeGB": {
                        "value": "[parameters('dataDiskSize')]"
                    },
                    "vmStAccountContainerName": {
                        "value": "[variables('vmStorageAccountContainerName')]"
                    },
                    "masterName": {
                        "value": "[parameters('masterVMName')]"
                    }
                }
            }
        }
    ],
    "variables": {
        "armApiVersion": "2015-06-15",
        "artifactsLocation": "https://raw.githubusercontent.com/taoyama/azure-bigcompute/taoyama-deploy/",
        "avSetName": "avSet",
        "diskCaching": "ReadWrite",
        "MUNGE_VER": "0.5.11",
        "MUNGE_USER_GROUP": "munge",
        "mungedet": "[concat(variables('MUNGE_VER'), ':', variables('MUNGE_USER_GROUP'), ':', parameters('schedulerpbsORTorque'), ':', parameters('saltStackInstall'))]",
        "CUDA_VER": "[parameters('cudaVersion')]",
        "TESLA_DRIVER_LINUX": "[parameters('teslaDriverVersion')]",
        "nvidiadet": "[concat(variables('CUDA_VER'), ':', variables('TESLA_DRIVER_LINUX'))]",
        "dockerdet": "[concat(parameters('dockerVer'), ':', parameters('dockerComposeVer'), ':', parameters('dockerMachineVer'))]",
        "imagedet": "[concat(parameters('imageSku'), ':', parameters('adminUserName'))]",
        "headNodeSize": "[parameters('headandWorkerNodeSize')]",
        "workerNodeSize": "[parameters('headandWorkerNodeSize')]",
        "clusterdet": "[concat(parameters('MasterVMName'), ':', parameters('workerVMNamePrefix'), ':', parameters('WorkerNodeCount'), ':', parameters('OMSWorkSpaceId'), ':', parameters('OMSWorkSpaceKey'), ':', parameters('nvidiadockerBinaryVersion'), ':', variables('headNodeSize'), ':', variables('workerNodeSize'))]",
        "installationCLI": "[concat('bash azuredeploy.sh ', variables('clusterdet'), ' ', parameters('HPCUserName'), ' ', parameters('mountFolder'), ' ', variables('mungedet'), ' ', variables('nvidiadet'), ' ', parameters('numDataDisks'), ' ', variables('dockerdet'), ' ', variables('imagedet'), ' ', variables('artifactsLocation'))]",
        "networkSettings": {
            "virtualNetworkName": "virtualnetwork",
            "addressPrefix": "10.0.0.0/16",
            "subnet": {
                "dse": {
                    "name": "dse",
                    "prefix": "10.0.0.0/24",
                    "vnet": "virtualnetwork"
                }
            },
            "statics": {
                "workerRange": {
                    "base": "10.0.0.",
                    "start": 5
                },
                "master": "10.0.0.254"
            }
        },
        "newStorageAccountName": "[concat(uniqueString(resourceGroup().id), 'dynamicdisk')]",
        "nicName": "nic",
        "OSDiskName": "osdisk",
        "publicIPAddressName": "publicips",
        "publicIPAddressType": "Dynamic",
        "sshKeyPath": "[concat('/home/',parameters('adminUserName'),'/.ssh/authorized_keys')]",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('networkSettings').subnet.dse.name)]",
        "vmStorageAccountContainerName": "vhd",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('networkSettings').virtualNetworkName)]"
    }
}
